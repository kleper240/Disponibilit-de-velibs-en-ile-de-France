import pandas as pd
import mysql.connector
import time
from carte import carte
from analyse import *

import ssl
ssl._create_default_https_context = ssl._create_unverified_context



def cree_bd():
    connection = mysql.connector.connect(host="localhost", user="root", password="root")
    basedb = connection.cursor()

    basedb.execute("CREATE DATABASE IF NOT EXISTS velibs")
    
    connection.commit()
    basedb.close()


    # connection = mysql.connector.connect(host="localhost", user="root", password="", database="velibs")
    # basedb = connection.cursor()



connection = mysql.connector.connect(host="localhost", user="root", password="root", database="velibs")
basedb = connection.cursor()




# Creation de table
basedb.execute("CREATE TABLE IF NOT EXISTS station_information_dynamique (stationcode TEXT, is_installed TEXT, numdocksavailable INT(64), numbikesavailable INT(64), mechanical INT(64), ebike INT(64), nom_arrondissement_communes TEXT,  Date datetime)")

basedb.execute("CREATE TABLE IF NOT EXISTS history_change (id INT(64) AUTO_INCREMENT PRIMARY KEY, table_name TEXT, action TEXT, action_date datetime)")



def cree_trigger():

    basedb.execute("""
        CREATE TRIGGER check_is_installed BEFORE INSERT ON station_information_dynamique
        FOR EACH ROW
        BEGIN
            IF NEW.is_installed = 'OUI' THEN
                SET NEW.is_installed = '1';
            ELSE
                SET NEW.is_installed = '0';
            END IF;
        END;
    """)
    # Création du trigger pour l'insertion
    basedb.execute("""
        CREATE TRIGGER IF NOT EXISTS log_history_change
        AFTER INSERT ON station_information_dynamique
        FOR EACH ROW
        BEGIN
            INSERT INTO history_change (table_name, action, action_date)
            VALUES ('station_information_dynamique', 'INSERT', DATETIME('now'));
        END;
    """)
    
    # Création du trigger pour la mise à jour
    basedb.execute("""
        CREATE TRIGGER IF NOT EXISTS log_history_change_after_update
        AFTER UPDATE ON station_information_dynamique
        FOR EACH ROW
        BEGIN
            INSERT INTO history_change (table_name, action, action_date)
            VALUES ('station_information_dynamique', 'UPDATE', DATETIME('now'));
        END;
    """)
    
    # Création du trigger pour la suppression
    basedb.execute("""
        CREATE TRIGGER IF NOT EXISTS log_history_change_after_delete
        AFTER DELETE ON station_information_dynamique
        FOR EACH ROW
        BEGIN
            INSERT INTO history_change (table_name, action, action_date)
            VALUES ('station_information_dynamique', 'DELETE', DATETIME('now'));
        END;
    """)

def drop_trigger():
    basedb.execute("DROP TRIGGER IF EXISTS log_history_change")
    basedb.execute("DROP TRIGGER IF EXISTS log_history_change_after_delete")
    basedb.execute("DROP TRIGGER IF EXISTS log_history_change_after_update")
    basedb.execute("DROP TRIGGER IF EXISTS check_is_installed")




# basedb.execute("DROP TABLE station_information_dynamique")

# Insert the data every 900 seconds (15 minutes)
def insertion():
    for rang in range(5):
        data = pd.read_json("https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/velib-disponibilite-en-temps-reel/exports/json?lang=fr&timezone=Europe%2FBerlin")
        sql = "INSERT INTO station_information_dynamique (stationcode,is_installed, numdocksavailable, numbikesavailable, mechanical, ebike, nom_arrondissement_communes, Date) VALUES (%s, %s, %s, %s, %s, %s, %s, NOW())"
        
        for i in data.values:
            value = (i[0],i[2],i[4],i[5],i[6],i[7],i[12])
            basedb.execute(sql, value)
        

        basedb.execute("""
                    SELECT s.stationcode, s.is_installed, s.numdocksavailable, s.numbikesavailable, s.mechanical, s.ebike, s.nom_arrondissement_communes, s.Date, st.name, st.capacity, st.longitude, st.latitude
                    FROM station_information_dynamique as s
                    JOIN station_information_static as st ON s.stationcode = st.stationcode
                    ORDER BY s.date DESC
                    LIMIT 1460;
    

                    """)
        
        resultat = basedb.fetchall()

        print(f"La {rang+1}ème mise à jour a été effectuée")

        carte(resultat)
        
        circuler2(resultat)

        capacite(resultat)

        
        time.sleep(5)

basedb.execute("""
                    SELECT s.stationcode, s.is_installed, s.numdocksavailable, s.numbikesavailable, s.mechanical, s.ebike, s.nom_arrondissement_communes, s.Date, st.name, st.capacity, st.longitude, st.latitude
                    FROM station_information_dynamique as s
                    JOIN station_information_static as st ON s.stationcode = st.stationcode
                    ORDER BY s.date DESC
                    """)
        
resultat2 = basedb.fetchall()

insertion()

# historique(resultat2)

def effacer():
    basedb.execute("""
        DELETE FROM station_information_dynamique
        WHERE date between  "2023-05-29 20:29:28" and "2023-05-29 20:29:42"
    """)
    print("la table a ete effacé")

# effacer()

def effacer2():
    basedb.execute("""
            DELETE FROM history_change
            WHERE date between  "2023-05-31 16:39:23" and "2023-05-29 21:02:11"
        """)
    print("la table a ete effacé")

connection.commit()
basedb.close()
