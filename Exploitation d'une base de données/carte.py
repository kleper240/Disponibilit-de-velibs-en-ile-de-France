
import folium
import json
# import mysql.connector
from folium import plugins


# connection = mysql.connector.connect(host="localhost", user="root", password="", database="velibs")
# basedb = connection.cursor()


def carte(resultat):
    carte = folium.Map(location=[48.8566, 2.3522], zoom_start=10)
    plugins.MiniMap().add_to(carte)
    plugins.Geocoder().add_to(carte)

    def arrondisemment():
        with open('arrondissements.json') as f:
            data = json.load(f)
        for i in data:
            arrondissements_layer = folium.GeoJson(i['geom'])
            marqueurs_arron.add_child(arrondissements_layer)



    marqueurs_indisponibles = folium.FeatureGroup(name = 'Vélos indisponibles ')
    marqueurs_nonstock = folium.FeatureGroup(name = 'pas des stock vélos disponible ')
    marqueurs_rouges = folium.FeatureGroup(name='Vélos mécaniques disponibles')
    marqueurs_verts = folium.FeatureGroup(name='Vélos électriques disponibles')
    marqueurs_bleus = folium.FeatureGroup(name='Vélos mécaniques et électriques disponibles')
    marqueurs_arron =folium.FeatureGroup(name='arrondissements')

    arrondisemment()
    
    for donne in resultat:
        couleur = ""
        if donne[1] == "0":
            couleur = "black"
            marqueurs_indisponibles.add_child(
                folium.Marker(location=[donne[11], donne[10]],
                            popup=f"""<h2 style="font-size: 20px; font-weight: bold; width: 350px">{donne[8]}</h2>
                                        <p><strong>Capacité:</strong> {donne[9]}</p>
                                        <p><strong>Disponibilité:</strong> {'oui' if donne[1] == "1" else 'Non'}</p>
                                        <p><strong>Vélos disponibles:</strong> {donne[3]}</p>
                                        <p><strong>Vélos mécaniques disponibles:</strong> {donne[4]}</p>
                                        <p><strong>Vélos électriques disponibles:</strong> {donne[5]}</p>
                                        <p><strong>date de la dernier mise a jour:</strong> {donne[7]}</p>""",
                            icon=folium.Icon(icon='bicycle', prefix='fa', color=couleur))
                
                )
        elif donne[4] > 0 and donne[5] == 0 and donne[1] == "1":
                couleur = "red"
                marqueurs_rouges.add_child(
                    folium.Marker(location=[donne[11], donne[10]],
                            popup=f"""<h2 style="font-size: 20px; font-weight: bold; width: 350px">{donne[8]}</h2>
                                        <p><strong>Ville:</strong> {donne[6]}</p>
                                        <p><strong>Capacité:</strong> {donne[9]}</p>
                                        <p><strong>Disponibilité:</strong> {'oui' if donne[1] == "1" else 'Non'}</p>
                                        <p><strong>Vélos disponibles:</strong> {donne[3]}</p>
                                        <p><strong>Vélos mécaniques disponibles:</strong> {donne[4]}</p>
                                        <p><strong>Vélos électriques disponibles:</strong> {donne[5]}</p>
                                        <p><strong>date de la dernier mise a jour:</strong> {donne[7]}</p>""",
                            icon=folium.Icon(icon='bicycle', prefix='fa', color=couleur))
                
                )
        elif donne[5] > 0 and donne[4] == 0 and donne[1] == "1":
                couleur = "green"
                marqueurs_verts.add_child(
                    folium.Marker(location=[donne[11], donne[10]],
                            popup=f"""<h2 style="font-size: 20px; font-weight: bold; width: 350px">{donne[8]}</h2>
                                        <p><strong>Ville:</strong> {donne[6]}</p>
                                        <p><strong>Capacité:</strong> {donne[9]}</p>
                                        <p><strong>Disponibilité:</strong> {'oui' if donne[1] == "1" else 'Non'}</p>
                                        <p><strong>Vélos disponibles:</strong> {donne[3]}</p>
                                        <p><strong>Vélos mécaniques disponibles:</strong> {donne[4]}</p>
                                        <p><strong>Vélos électriques disponibles:</strong> {donne[5]}</p>
                                        <p><strong>date de la dernier mise a jour:</strong> {donne[7]}</p>""",
                            icon=folium.Icon(icon='bicycle', prefix='fa', color=couleur))
                )
        elif donne[5] != 0 and donne[4] != 0 and donne[1] == "1":
                couleur = "blue"
                marqueurs_bleus.add_child(
                    folium.Marker(location=[donne[11], donne[10]],
                            popup=f"""<h2 style="font-size: 20px; font-weight: bold; width: 350px">{donne[8]}</h2>
                                        <p><strong>Ville:</strong> {donne[6]}</p>
                                        <p><strong>Capacité:</strong> {donne[9]}</p>
                                        <p><strong>Disponibilité:</strong> {'oui' if donne[1] == "1" else 'Non'}</p>
                                        <p><strong>Vélos disponibles:</strong> {donne[3]}</p>
                                        <p><strong>Vélos mécaniques disponibles:</strong> {donne[4]}</p>
                                        <p><strong>Vélos électriques disponibles:</strong> {donne[5]}</p>
                                        <p><strong>date de la dernier mise a jour:</strong> {donne[7]}</p>""",
                            icon=folium.Icon(icon='bicycle', prefix='fa', color=couleur))
                )
        elif donne[2] == 0 or donne[2] > 0:
                couleur = "lightgray"
                marqueurs_nonstock.add_child(
                    folium.Marker(location=[donne[11], donne[10]],
                            popup=f"""<h2 style="font-size: 20px; font-weight: bold; width: 350px">{donne[8]}</h2>
                                        <p><strong>Ville:</strong> {donne[6]}</p>
                                        <p><strong>Capacité:</strong> {donne[9]}</p>
                                        <p><strong>Disponibilité:</strong> {'oui' if donne[1] == "1" else 'Non'}</p>
                                        <p><strong>Vélos disponibles:</strong> {donne[3]}</p>
                                        <p><strong>Vélos mécaniques disponibles:</strong> {donne[4]}</p>
                                        <p><strong>Vélos électriques disponibles:</strong> {donne[5]}</p>
                                        <p><strong>date de la dernier mise a jour:</strong> {donne[7]}</p>""",
                            icon=folium.Icon(icon='bicycle', prefix='fa', color=couleur))
                )
            # Ajouter les groupes de marqueurs à la carte
    
    carte.add_child(marqueurs_rouges)
    carte.add_child(marqueurs_verts)
    carte.add_child(marqueurs_bleus)
    carte.add_child(marqueurs_indisponibles)
    carte.add_child(marqueurs_nonstock)
    carte.add_child(marqueurs_arron)
    # Ajouter un contrôle de couches à la carte
    folium.LayerControl().add_to(carte)
    legend_html = '''
        <div style="position: fixed; bottom: 50px; left: 50px; background-color: white; padding: 10px; border: 1px solid gray; z-index: 9999;">
            <h4>Légende</h4>
            <p><i class="fa fa-map-marker fa-2x" style="color: red;"></i> vélos mécaniques disponibles</p>
            <p><i class="fa fa-map-marker fa-2x" style="color: green;"></i> vélos électriques disponibles</p>
            <p><i class="fa fa-map-marker fa-2x" style="color: blue;"></i> Vélos mécaniques et électriques disponibles</p>
            <p><i class="fa fa-map-marker fa-2x" style="color: lightgray;"></i> Stations pas des stock vélos disponible</p>
            <p><i class="fa fa-map-marker fa-2x" style="color: black;"></i> Stations Vélos indisponibles</p>

        </div>
    '''


    carte.get_root().html.add_child(folium.Element(legend_html))
    carte.save("carte_velib.html")

# connection.commit()
# basedb.close()


